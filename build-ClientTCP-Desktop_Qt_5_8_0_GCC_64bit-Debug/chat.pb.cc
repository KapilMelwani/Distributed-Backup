// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChattingMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChattingMessages_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChattingMessages_typeMessage_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChattingMessages_descriptor_ = file->message_type(0);
  static const int ChattingMessages_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChattingMessages, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChattingMessages, sourceroute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChattingMessages, sizefile_),
  };
  ChattingMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChattingMessages_descriptor_,
      ChattingMessages::default_instance_,
      ChattingMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChattingMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChattingMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChattingMessages));
  ChattingMessages_typeMessage_descriptor_ = ChattingMessages_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChattingMessages_descriptor_, &ChattingMessages::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChattingMessages::default_instance_;
  delete ChattingMessages_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\"\211\001\n\020ChattingMessages\022+\n\004typ"
    "e\030\024 \002(\0162\035.ChattingMessages.typeMessage\022\023"
    "\n\013sourceRoute\030\036 \001(\t\022\020\n\010sizeFile\030( \001(\005\"!\n"
    "\013typeMessage\022\010\n\004TEXT\020\001\022\010\n\004FILE\020\002", 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChattingMessages::default_instance_ = new ChattingMessages();
  ChattingMessages::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChattingMessages_typeMessage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChattingMessages_typeMessage_descriptor_;
}
bool ChattingMessages_typeMessage_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChattingMessages_typeMessage ChattingMessages::TEXT;
const ChattingMessages_typeMessage ChattingMessages::FILE;
const ChattingMessages_typeMessage ChattingMessages::typeMessage_MIN;
const ChattingMessages_typeMessage ChattingMessages::typeMessage_MAX;
const int ChattingMessages::typeMessage_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChattingMessages::kTypeFieldNumber;
const int ChattingMessages::kSourceRouteFieldNumber;
const int ChattingMessages::kSizeFileFieldNumber;
#endif  // !_MSC_VER

ChattingMessages::ChattingMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChattingMessages)
}

void ChattingMessages::InitAsDefaultInstance() {
}

ChattingMessages::ChattingMessages(const ChattingMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChattingMessages)
}

void ChattingMessages::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  sourceroute_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sizefile_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChattingMessages::~ChattingMessages() {
  // @@protoc_insertion_point(destructor:ChattingMessages)
  SharedDtor();
}

void ChattingMessages::SharedDtor() {
  if (sourceroute_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceroute_;
  }
  if (this != default_instance_) {
  }
}

void ChattingMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChattingMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChattingMessages_descriptor_;
}

const ChattingMessages& ChattingMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChattingMessages* ChattingMessages::default_instance_ = NULL;

ChattingMessages* ChattingMessages::New() const {
  return new ChattingMessages;
}

void ChattingMessages::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_sourceroute()) {
      if (sourceroute_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceroute_->clear();
      }
    }
    sizefile_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChattingMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChattingMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChattingMessages.typeMessage type = 20;
      case 20: {
        if (tag == 160) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChattingMessages_typeMessage_IsValid(value)) {
            set_type(static_cast< ::ChattingMessages_typeMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_sourceRoute;
        break;
      }

      // optional string sourceRoute = 30;
      case 30: {
        if (tag == 242) {
         parse_sourceRoute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceroute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceroute().data(), this->sourceroute().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceroute");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_sizeFile;
        break;
      }

      // optional int32 sizeFile = 40;
      case 40: {
        if (tag == 320) {
         parse_sizeFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizefile_)));
          set_has_sizefile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChattingMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChattingMessages)
  return false;
#undef DO_
}

void ChattingMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChattingMessages)
  // required .ChattingMessages.typeMessage type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // optional string sourceRoute = 30;
  if (has_sourceroute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceroute().data(), this->sourceroute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceroute");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->sourceroute(), output);
  }

  // optional int32 sizeFile = 40;
  if (has_sizefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->sizefile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChattingMessages)
}

::google::protobuf::uint8* ChattingMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChattingMessages)
  // required .ChattingMessages.typeMessage type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // optional string sourceRoute = 30;
  if (has_sourceroute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceroute().data(), this->sourceroute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceroute");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->sourceroute(), target);
  }

  // optional int32 sizeFile = 40;
  if (has_sizefile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->sizefile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChattingMessages)
  return target;
}

int ChattingMessages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ChattingMessages.typeMessage type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string sourceRoute = 30;
    if (has_sourceroute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceroute());
    }

    // optional int32 sizeFile = 40;
    if (has_sizefile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sizefile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChattingMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChattingMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChattingMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChattingMessages::MergeFrom(const ChattingMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sourceroute()) {
      set_sourceroute(from.sourceroute());
    }
    if (from.has_sizefile()) {
      set_sizefile(from.sizefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChattingMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChattingMessages::CopyFrom(const ChattingMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChattingMessages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChattingMessages::Swap(ChattingMessages* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sourceroute_, other->sourceroute_);
    std::swap(sizefile_, other->sizefile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChattingMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChattingMessages_descriptor_;
  metadata.reflection = ChattingMessages_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
